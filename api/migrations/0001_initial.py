# Generated by Django 3.2.12 on 2022-06-16 09:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('typeCompte', models.CharField(blank=True, default='client', max_length=100)),
                ('tlf', models.CharField(max_length=100, unique=True)),
                ('is_connected', models.BooleanField(default=False)),
                ('is_free', models.BooleanField(default=True)),
                ('firebaseID', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '1. Add Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_name', models.CharField(blank=True, max_length=100, null=True)),
                ('path_cat', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'client',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'driver',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Marque',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marque_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'marque',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(blank=True, max_length=100, null=True)),
                ('id_marque', models.ForeignKey(blank=True, db_column='id_marque', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.marque')),
            ],
            options={
                'db_table': 'model',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alt', models.FloatField()),
                ('long', models.FloatField()),
            ],
            options={
                'db_table': 'point',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Typeuser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_user', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'typeuser',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Voiture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matrciule', models.CharField(blank=True, max_length=100, null=True)),
                ('id_cat', models.ForeignKey(blank=True, db_column='id_cat', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.category')),
                ('id_driver', models.ForeignKey(blank=True, db_column='id_driver', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.driver')),
                ('id_model', models.ForeignKey(blank=True, db_column='id_model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.model')),
            ],
            options={
                'db_table': 'voiture',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Docs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path_doc', models.CharField(blank=True, max_length=100, null=True)),
                ('id_client', models.ForeignKey(blank=True, db_column='id_client', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.client')),
                ('id_driver', models.ForeignKey(blank=True, db_column='id_driver', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.driver')),
                ('id_voiture', models.ForeignKey(blank=True, db_column='id_voiture', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.voiture')),
            ],
            options={
                'db_table': 'docs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Coursa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_dapart', models.DateField(blank=True, null=True)),
                ('date_arrive', models.DateField(blank=True, null=True)),
                ('arrive', models.ForeignKey(blank=True, db_column='arrive', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='arrive', to='api.point')),
                ('client', models.ForeignKey(blank=True, db_column='client', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.client')),
                ('depart', models.ForeignKey(blank=True, db_column='depart', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='depart', to='api.point')),
                ('voiture', models.ForeignKey(blank=True, db_column='voiture', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.voiture')),
            ],
            options={
                'db_table': 'coursa',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='client',
            name='typeuser',
            field=models.ForeignKey(blank=True, db_column='typeUser', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.typeuser'),
        ),
        migrations.AddField(
            model_name='client',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Amite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_client', models.OneToOneField(db_column='id_client', on_delete=django.db.models.deletion.DO_NOTHING, to='api.client')),
                ('id_driver', models.OneToOneField(db_column='id_driver', on_delete=django.db.models.deletion.DO_NOTHING, to='api.driver')),
            ],
            options={
                'db_table': 'amite',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tracking',
            fields=[
                ('coursa', models.OneToOneField(db_column='coursa', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='api.coursa')),
                ('point', models.ForeignKey(db_column='point', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.point')),
            ],
            options={
                'db_table': 'tracking',
                'managed': True,
                'unique_together': {('coursa', 'point')},
            },
        ),
    ]
